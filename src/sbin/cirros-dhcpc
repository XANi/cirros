#!/bin/sh
# A simple wrapper around udhcpc so that we are able to dynamically specify
# which options it should ask for. It only configures eth0.

. ${CIRROS_SHLIB:=/lib/cirros/shlib} ||
	{ echo "failed to read ${CIRROS_SHLIB}" 1>&2; exit 1; }

set -f

[ -f /etc/default/udhcpc ] && . /etc/default/udhcpc

IFACE=$2
RESOLV_CONF="/etc/resolv.conf"
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"
[ -n "$mtu" ] && MTU="$mtu"

apply_static_routes() {
	# routes are pairs of network and gateway
	# 169.254.169.254/32 10.65.0.128
	local net="" router="" err=0
	while [ $# -ne 0 ]; do
		net="$1"
		router="$2"
		[ -n "$net" ] || continue
		echo "adding net $net with router $router" 1>&2
		route add -net "$net" gw "$router" || {
			echo "WARN: failed: route add -net \"$net\" gw \"$router\"" 1>&2;
			err=$(($err+1));
		}
		shift 2 || {
			echo "apply_static_routes: failed shift 2. odd number of args?" 1>&2;
			return 1;
		}
	done
	return $err
}

case "$1" in
	up)
		[ -z "$IFACE" ] && echo "Missing interface to start." && exit 0
		# Gather all options and start udhcpc.
		opts=""
		for opt in $OPTIONS; do
			opts="-O $opt $opts"
		done
		echo "Starting udhcpc on $IFACE, asking for options {$OPTIONS}"
		/sbin/udhcpc -p /var/run/udhcpc.${IFACE}.pid -R -n -T $TIMEOUT -i $IFACE -s "/sbin/cirros-dhcpc" $opts -x hostname:`hostname`
		;;
	down)
		[ -z "$IFACE" ] && echo "Missing interface to shutdown." && exit 0
		kill `cat /var/run/udhcpc.${IFACE}.pid` 2>/dev/null
		exit 0
		;;
	deconfig)
		/sbin/ifconfig $interface 0.0.0.0
		;;

	renew|bound)
		/sbin/ifconfig $interface $ip $BROADCAST $NETMASK mtu $MTU

		if [ -n "$router" ] ; then
			echo "deleting routers"
			# cirros: this loop is cirros modification to remove a message
			# like the following going to the console:
			#   route: SIOCDELRT: No such process		 
			while :; do					   
				out=$(route del default gw 0.0.0.0 dev $interface 2>&1)
				ret=$?
				[ $ret -eq 0 ] && break
				case "$out" in
					*SIOCDELRT*[Nn]o\ such\ process*) break;;
				esac
				echo "deleting routes failed: $out" 1>&2
			done
			# end cirros modification 

			for i in $router ; do
				route add default gw $i dev $interface
			done
		fi

		echo -n > $RESOLV_CONF
		[ -n "$domain" ] && echo search $domain >> $RESOLV_CONF
		for i in $dns ; do
			echo adding dns $i
			echo nameserver $i >> $RESOLV_CONF
		done

		apply_static_routes $staticroutes
		;;
	*)
		echo "Usage: $0 <up|down>"
		;;
esac

exit 0

# vi: ts=4 noexpandtab syntax=sh

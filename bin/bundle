#!/bin/bash
# vi: ts=4 noexpandtab
#

TEMP_D=""
UMOUNT=""
DEF_SIZE=24M
MODULES="acpiphp e1000 ne2k-pci 8139cp pcnet32 mii ip_tables"
DEBUG=0

error() { echo "$@" 1>&2; }
debug() {
	[ "${DEBUG}" -ge "${1}" ] || return 0;
	shift;
	error "$@"
}
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
Usage() {
	cat <<EOF
Usage: ${0##*/} rootfs.tar kpkg.deb output_dir
   [re]Bundle a buildroot rootfs into a mini-cloud image

   options:
     -s | --size S            resize image to size (default: ${DEF_SIZE})

   Example:
    ${0##*/} rootfs.tar linux-image-*-virtuaal*.deb build-output/
EOF
}
bad_Usage() { Usage 1>&2; fail "$@"; }
cleanup() {
	[ -z "${UMOUNT}" ] || umount "${UMOUNT}"
	[ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}
xrsync() {
	rsync --archive --xattrs --hard-links --acls --sparse "$@"
}

write_grub_menu_lst() {
	local initrd="$1"
	cat <<EOF
default         0
timeout         0
hiddenmenu

title     Linux Kernel
root      (hd0)
kernel    /vmlinuz /dev/sda1 ro
$([ -n "${initrd}" ] && echo "initrd /initrd.img")
EOF
}

write_initramfs_init() {
	cat <<"EOF"
#!/bin/sh
mkdir -p /proc /newroot /dev
mount -t devtmpfs /dev /dev
mount -t proc /proc /proc
found=0
debug=0
while read maj min blk name other; do
	[ -n "${maj}" -a "${maj}" != "major" ] || continue
	umount=0
	mount -o ro "/dev/${name}" "/newroot" >/dev/null 2>&1 &&
		umount=1 &&
		[ -x /newroot/sbin/init ] && found=1 && break
	[ ${umount} -eq 0 ] || umount /newroot
done < /proc/partitions
read cmdline < /proc/cmdline
for arg in $cmdline; do
	case "$arg" in
		debug-initrd) debug=1;;
	esac
done

if [ $debug -eq 1 ]; then
	echo "dropping into initramfs debug shell"
	/bin/sh
fi

if [ $found -eq 1 ]; then
	echo "Used ${name} for root filesystem"
	umount /dev
	umount /proc
	cd /newroot
	# FIXME: pivot_root doesn't work anymore. probably want switch_root
	# but busybox-static (oneiric, 1:1.18.4-2ubuntu1) does not have
	# switch_root built in
	exec switch_root -c /dev/console /newroot /sbin/init "$@"
fi
echo "badness occurred in ramdisk"
exec /bin/sh
EOF
}

short_opts="hs:v"
long_opts="initrd-busybox:,help,size:,verbose"
getopt_out=$(getopt --name "${0##*/}" \
	--options "${short_opts}" --long "${long_opts}" -- "$@") &&
	eval set -- "${getopt_out}" ||
	bad_Usage

topdir=$(cd "${0%/*}/.." && pwd)
size=${DEF_SIZE}
fs_label="mc-rootfs"
fs_type="ext2"

while [ $# -ne 0 ]; do
	cur=${1}; next=${2};
	case "$cur" in
		-h|--help) Usage; exit 0;;
		-s|--size) size=${next}; shift;;
		-v|--verbose) DEBUG=$((${DEBUG}+1));;
		--) shift; break;;
	esac
	shift;
done

[ $# -eq 3 ] || bad_Usage "must give rootfs.tar, kernel pkg, out_dir"
rootfs_in=${1}
kpkg_in=${2}
out_d_in=${3}

PATH="$topdir/bin:$PATH"
src_dir="${topdir}/src"
src_symlinks="${topdir}/symlinks.list"
makedevs_list="${topdir}/makedevs.list"
fixup_fs="${topdir}/fixup-fs"

[ "$(id -u)" = "0" ] || fail "sorry... must be root"

[ -d "${src_dir}" ] || fail "no source dir ${src_d}"

TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/.${0##*/}.XXXXXX") ||
	fail "failed to make tempd"
trap cleanup EXIT

mkdir -p "${out_d_in}" && out_d=$(readlink -f "${out_d_in}") &&
	rootfs=$(readlink -f "${rootfs_in}") &&
	kpkg=$(readlink -f "${kpkg_in}") ||
	fail "failed to get full path for input"

out_partimg="${out_d}/part.img"
out_kernel="${out_d}/kernel"
out_initramfs="${out_d}/initramfs"
out_diskimg="${out_d}/disk.img"

mp="${TEMP_D}/mnt"
kernel_d="${TEMP_D}/kernel"
kern_list_full="${TEMP_D}/kernel.files.full"
kern_files="${TEMP_D}/kernel.files"
kern_modules="${TEMP_D}/kernel.files.modules"
kern_files_tar="${TEMP_D}/kernel.files.tar"
overlay_d="${TEMP_D}/overlay"
initramfs_d="${TEMP_D}/initramfs"
initramfs="${TEMP_D}/initramfs.img"

mkdir -p "${mp}" "${kernel_d}" "${overlay_d}" \
	"${initramfs_d}" ||
	fail "failed to make temp dirs"

debug 1 "creating filesystem in ${out_partimg}"
truncate "--size=${size}" "${out_partimg}" ||
	fail "failed to create ${out_partimg} of size ${size}"

out=$("mkfs.${fs_type}" -F "${out_partimg}" -L "${fs_label}" 2>&1) ||
	fail "failed to make filesystem of type ${fs_type}: ${out}" 

debug 1 "syncing files to ${out_partimg}"
mount -o loop "${out_partimg}" "${mp}" && UMOUNT=${mp} ||
	fail "failed to mount ${out_partimg} loopback"

tar -C "${mp}" -xp < "${rootfs_in}"

debug 1 "preparing kernel overlay"
# creating kernel tarball
dpkg -x "${kpkg_in}" "${kernel_d}" &&
	( cd "${kernel_d}" && find * -type f ) > "${kern_list_full}" ||
	fail "failed to extract kernel to ${kernel_d}"

kver=$( cd "${kernel_d}/lib/modules" && for x in 2*; do v="${x}"; done ;
	[ -d "${v}" ] || exit 1; echo "${v}" ) ||
	fail "failed to find kernel version. no lib/modules/* ?"

depmod -a --basedir "${kernel_d}" "${kver}" ||
	fail "failed to run depmod"

mdep="${kernel_d}/lib/modules/${kver}/modules.dep"
for x in ${MODULES}; do
	grep -q "/${x}.ko" "${mdep}" ||
		{ error "WARNING: no ${x} in kernel package!"; continue; }
	awk -F: '$1 ~ mat {
		sub(":","",$1)
		printf("%s/%s\n",p,$1)
		leng=split($0,deps," ")
		x=2 # strange, but 0 contains nothing, 1 contains first field (with :)
		while ( x<=leng ) {
			printf("%s/%s\n", p, deps[x]);
			x++
		}
	}' mat="/${x}.ko$" p="lib/modules/${kver}" "${mdep}"
done > "${kern_modules}"
sort -u "${kern_modules}" > "${kern_files}"
vmlinuz=$( cd "${kernel_d}" && [ -f boot/vmlinuz-* ] &&
	echo boot/vmlinuz-* ) && echo "${vmlinuz}" >> "${kern_files}" &&
	ln -sf "$vmlinuz" "$kernel_d/vmlinuz" && echo "vmlinuz" >> "$kern_files" ||
	fail "no kernel (boot/vmlinuz-*) found in ${kpkg_in}"

debug 1 "creating initramfs"
# FIXME: should do some dynamic query to support busybox being static
initramfs_bins="bin/busybox lib/libc.so.0 lib/ld-uClibc.so.0 lib/libuClibc-0.9.32.so lib/ld-uClibc-0.9.32.so"
mkdir "${initramfs_d}/bin" "$initramfs_d/lib" &&
	tar -C "$mp" -cpf - $initramfs_bins > "$TEMP_D/tmp.tar" &&
    tar -C "$initramfs_d" -xf - < "$TEMP_D/tmp.tar" ||
	fail "failed to copy busybox to initramfs_d"
for p in sh mount mkdir pivot_root umount switch_root; do
	ln -s busybox "${initramfs_d}/bin/${p}" ||
		fail "failed to link to busybox"
done

write_initramfs_init > "${initramfs_d}/init" &&
	chmod 755 "${initramfs_d}/init" || fail "failed chmod initramfs/init"
( cd "${initramfs_d}" && find . | cpio --quiet --dereference -o -H newc | gzip ) > "${initramfs}"
cp "${initramfs}" "${kernel_d}/boot/initrd.img-${kver}" &&
	ln -s "boot/initrd.img-${kver}" "${kernel_d}/initrd.img" &&
	echo "initrd.img" >> "${kern_files}" &&
	echo "boot/initrd.img-${kver}" >> "${kern_files}" ||
	fail "failed to copy initramfs to kernel dir"

tar -C "${kernel_d}" -cpf - \
	--files-from "${kern_files}" > "${kern_files_tar}" ||
	fail "failed to collect kernel files"

debug 1 "preparing source overlay from ${src_dir}"
xrsync "${src_dir}/" "${overlay_d}" ||
	fail "failed to copy source dir"

chown -R 0:0 "${overlay_d}" || fail "failed to chown files in overlay"
	
if [ -f "${src_symlinks}" ]; then
	( cd "${overlay_d}" &&
		while read src target; do
			{ [ -d "${target%/*}" ] || mkdir -p "${target%/*}"; } ||
				{ error "could not create ${target%/*}"; exit 1; }
			ln -sf "${src}" "${target}" || exit 1
		done < "${src_symlinks}"
	) || fail "failed to create symlinks"
fi

tar -C "${mp}" -xpf - < "${kern_files_tar}" ||
	fail "failed to copy kernel files to new filesystem"

depmod -a --basedir "${mp}" "${kver}" ||
	fail "failed to run depmod for kver ${kver} in output"

if [ -x "${fixup_fs}" ]; then
	"${fixup_fs}" "${mp}" ||
		fail "failed to fixup filesystem"
fi

if [ -f "${makedevs_list}" ]; then
	xmakedevs "$makedevs_list" "$overlay_d" ||
		fail "failed to makedevs on overlay"
fi

xrsync "${overlay_d}/" "${mp}"

mkdir -p "${mp}/boot/grub" &&
	write_grub_menu_lst "${out_initramfs}" > "${mp}/boot/grub/menu.lst" ||
	fail "failed to write menu.lst"

for x in ${MODULES}; do
	echo "${x}" >> "${mp}/etc/modtab"
done

umount "${mp}" && UMOUNT="" ||
	fail "failed to unmount ${out_partimg}"

cp "${kernel_d}/${vmlinuz}" "${out_kernel}" ||
	fail "failed to copy kernel to ${out_kernel}"

{ [ -z "${out_initramfs}" ] || cp "${initramfs}" "${out_initramfs}"; }  ||
	fail "failed to copy initramfs to ${out_initramfs}"

if [ -n "${SUDO_USER}" ]; then
	u=${SUDO_USER}
	g=$(id -g "${u}") || g=${u}
	chown "${u}:${g}" "${out_partimg}" "${out_kernel}" "${out_initramfs}" ||
		fail "failed to grant ownership of ${u}:${g} to ${u}:${g}"
fi

echo "wrote ${out_partimg}"
echo "wrote ${out_kernel}"
echo "wrote ${out_initramfs}"


exit 0
